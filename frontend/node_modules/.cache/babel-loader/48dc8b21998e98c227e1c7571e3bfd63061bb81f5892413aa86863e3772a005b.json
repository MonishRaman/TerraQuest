{"ast":null,"code":"import axios from'axios';const API_BASE_URL='http://localhost:5000/api';export const api={async predictHabitability(data){const response=await axios.post(\"\".concat(API_BASE_URL,\"/habitability\"),data);return response.data;},async classifyPlanet(data){const response=await axios.post(\"\".concat(API_BASE_URL,\"/classify\"),data);return response.data;},async generateTransit(planetName){const response=await axios.post(\"\".concat(API_BASE_URL,\"/transit/generate\"),{planetName});return response.data;},async analyzeAll(data){const response=await axios.post(\"\".concat(API_BASE_URL,\"/analyze\"),data);return response.data;}};","map":{"version":3,"names":["axios","API_BASE_URL","api","predictHabitability","data","response","post","concat","classifyPlanet","generateTransit","planetName","analyzeAll"],"sources":["C:/Users/Monish.R/Downloads/Nasa Mishra/Nasamishra/nasa-exoplanet-hackathon/frontend/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\r\nimport { HabitabilityResult, PlanetClassification, TransitResult } from '../types';\r\n\r\nconst API_BASE_URL = 'http://localhost:5000/api';\r\n\r\nexport const api = {\r\n  async predictHabitability(data: {\r\n    radius: number;\r\n    orbit: number;\r\n    starType: string;\r\n    starMass?: number;\r\n    starTemp?: number;\r\n  }): Promise<HabitabilityResult> {\r\n    const response = await axios.post(`${API_BASE_URL}/habitability`, data);\r\n    return response.data;\r\n  },\r\n\r\n  async classifyPlanet(data: {\r\n    radius: number;\r\n    mass: number;\r\n    orbit: number;\r\n  }): Promise<PlanetClassification> {\r\n    const response = await axios.post(`${API_BASE_URL}/classify`, data);\r\n    return response.data;\r\n  },\r\n\r\n  async generateTransit(planetName: string): Promise<TransitResult> {\r\n    const response = await axios.post(`${API_BASE_URL}/transit/generate`, { planetName });\r\n    return response.data;\r\n  },\r\n\r\n  async analyzeAll(data: {\r\n    radius: number;\r\n    orbit: number;\r\n    mass: number;\r\n    starType: string;\r\n    starMass?: number;\r\n    starTemp?: number;\r\n  }) {\r\n    const response = await axios.post(`${API_BASE_URL}/analyze`, data);\r\n    return response.data;\r\n  }\r\n};\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CAGzB,KAAM,CAAAC,YAAY,CAAG,2BAA2B,CAEhD,MAAO,MAAM,CAAAC,GAAG,CAAG,CACjB,KAAM,CAAAC,mBAAmBA,CAACC,IAMzB,CAA+B,CAC9B,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAL,KAAK,CAACM,IAAI,IAAAC,MAAA,CAAIN,YAAY,kBAAiBG,IAAI,CAAC,CACvE,MAAO,CAAAC,QAAQ,CAACD,IAAI,CACtB,CAAC,CAED,KAAM,CAAAI,cAAcA,CAACJ,IAIpB,CAAiC,CAChC,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAL,KAAK,CAACM,IAAI,IAAAC,MAAA,CAAIN,YAAY,cAAaG,IAAI,CAAC,CACnE,MAAO,CAAAC,QAAQ,CAACD,IAAI,CACtB,CAAC,CAED,KAAM,CAAAK,eAAeA,CAACC,UAAkB,CAA0B,CAChE,KAAM,CAAAL,QAAQ,CAAG,KAAM,CAAAL,KAAK,CAACM,IAAI,IAAAC,MAAA,CAAIN,YAAY,sBAAqB,CAAES,UAAW,CAAC,CAAC,CACrF,MAAO,CAAAL,QAAQ,CAACD,IAAI,CACtB,CAAC,CAED,KAAM,CAAAO,UAAUA,CAACP,IAOhB,CAAE,CACD,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAL,KAAK,CAACM,IAAI,IAAAC,MAAA,CAAIN,YAAY,aAAYG,IAAI,CAAC,CAClE,MAAO,CAAAC,QAAQ,CAACD,IAAI,CACtB,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}